#!/usr/bin/env node

/**
 * Module dependencies
 */
const http = require('http');
const debug = require('debug')('smart-ai-web-service:server');
const connectDB = require('../config/dbConnect');
const dotenv = require('dotenv'); // 加载 .env.development 文件

// 自动根据 NODE_ENV 加载环境配置
const envFile = process.env.NODE_ENV === 'production'
    ? '.env.production'
    : '.env.development';
dotenv.config({ path: envFile });

console.log('当前环境:', process.env.NODE_ENV || 'development');

(async () => {
  try {
    // 先连接数据库
    await connectDB();

    // 再加载 app.js,因为app.js中引入的qianfan.js使用了数据库,所以要先连接数据库防止报错
    const app = require('../app');

    // 获取端口并设置
    const port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    // 创建 HTTP server
    const server = http.createServer(app);

    // 启动监听
    server.listen(port);
    server.on('error', (err) => onError(err, port));
    server.on('listening', () => onListening(server));

  } catch (err) {
    console.error('启动失败:', err);
    process.exit(1);
  }
})();

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error, port) {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' 需要管理员权限');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' 已被占用');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening(server) {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
